install.packages("ggplto2")
install.packages("ggplot2")
?datasets
?cat
cat("233")
print("233")
my.bootstrapci<-function(vec0,nboot=10000,alpha=0.05,statfun=mean)
{
#extract sample size, mean and standard deviation from the original data
n0<-length(vec0)
mean0<-statfun(vec0)
#sd0<-sqrt(var(vec0))
# create a vector to store the location of the bootstrap studentized deviation vector
bootvec<-NULL
#create the bootstrap distribution using a for loop
for( i in 1:nboot){
vecb<-sample(vec0,replace=T)
#create mean and standard deviation to studentize
meanb<-statfun(vecb)
# sdb<-sqrt(var(vecb))
#note since resampling full vector we can use n0 for sample size of vecb
bootvec<-c(bootvec, meanb)
}
bias<- mean(bootvec)-mean0
#Calculate lower and upper quantile of the bootstrap distribution
lq<-quantile(bootvec,alpha/2)
uq<-quantile(bootvec,1-alpha/2)
#ADD the other two confidence intervals.
#incorporate into the bootstrap confidence interval (what algebra supports this?) and output result
#LB<-mean0-(sd0/sqrt(n0))*uq
#UB<-mean0-(sd0/sqrt(n0))*lq
#since I have the mean and standard deviation calculate the normal confidence interval here as well
se=sqrt(sum((bootvec - mean(bootvec))^2) / nboot)
NLB<-mean0-sd(vec0)*qnorm(1-alpha/2)
NUB<-mean0+sd(vec0)*qnorm(1-alpha/2)
list(bias=mean(bootvec)-mean0
,normal.confidence.interval=c(NLB,NUB), Pivotal.Interval=c(2*mean0-uq, 2*mean0-lq),
Percentile.Interval=c(quantile(bootvec, alpha/2), quantile(bootvec, 1-alpha/2)))
}
simu<-function(mu.val=3,n=30,nsim=1000)
{
#create coverage indicator vectors for bootstrap and normal
cvec.boot<-NULL
cvec.norm<-NULL
cvec.perc<-NULL
cvec.jack<-NULL
#calculate real mean
mulnorm<-(exp(mu.val+1/2))
#run simulation
for(i in 1:nsim){
if((i/10)==floor(i/10)){
print(i)
#let me know computer hasnt died
}
#sample the simulation vector
vec.sample<-rlnorm(n,mu.val)
#bootstrap it
boot.list<-my.bootstrapci(vec.sample)
boot.conf<-boot.list$Pivotal.Interval #aka pivot interval
norm.conf<-boot.list$normal.confidence.interval
percentile.conf<-boot.list$Percentile.Interval
jack<-Jackknife(vec.sample, statfun=mean)
jack.interval<-jack$interval
#calculate if confidence intervals include mu
#count up the coverage by the bootstrap interval
cvec.boot<-c(cvec.boot,(boot.conf[1]<mulnorm)*(boot.conf[2]>mulnorm))
#count up the coverage by the normal theory interval
cvec.norm<-c(cvec.norm,(norm.conf[1]<mulnorm)*(norm.conf[2]>mulnorm))
cvec.perc<-c(cvec.perc, (percentile.conf[1]< mulnorm)*(percentile.conf[2]>mulnorm) )
cvec.jack<-c(cvec.jack, (jack.interval[1]< mulnorm)*(jack.interval[2]>mulnorm))
}
#calculate and output coverage probability estimates
return(list(boot.coverage=(sum(cvec.boot)/nsim),norm.coverage=(sum(cvec.norm)/nsim), perc.coverage
=(sum(cvec.perc)/nsim), jack.coverage=(
sum(cvec.jack)/nsim) ) )
}
simu(nsim=50)
Jackknife<-function(v1,statfunc=sd, alpha=0.05)
{
n1<-length(v1)
jackvec<-NULL
mu0<-statfunc(v1)
for(i in 1:n1){
mua<-statfunc(v1[-i])
jackvec<-c(jackvec, n1*(mu0)-(n1-1)*mua) # psudovalue
}
jackbias<-(n1-1)*(mean(jackvec)-mu0)
jacksd<-sqrt(sum( (jackvec - mean(jackvec) )^2)  / (n1*(n1-1)) )
list(mu0=mu0,jackbias=jackbias,jacksd=jacksd, interval=c(mu0-qt(1-alpha, df=n1-1)*jacksd,
mu0+qt(1-alpha, df=n1-1)*jacksd))
}
simu(nsim = 50)
#sample variance divided by n
sam_var<-function(x){
return( sum( (x-mean(x))^2) / length(x)
)
}
result<-simu2(nism=50)
simu2<-function(mu=0, sd=1 , n=30, nsim=1000){
boot.bias<-NULL
jack.bias<-NULL
for(i in 1:nsim){
vec.sample=rnorm(n, mean = mu, sd)
boot.bias<-c(boot.bias, my.bootstrapci(vec0 = vec.sample, statfun = sam_var)$bias )
jack.bias<-c(jack.bias, Jackknife(vec.sample, statfunc = sam_var)$jackbias )
}
return( list(
BootBias=boot.bias, JackBias=jack.bias
) )
}
result<-simu2(nism=50)
result<-simu2(nsim=50)
hist(result$Bootbias)
result
result$BootBias
typeof(result$BootBias)
hist(as.numeric(result$BootBias))
result<-simu2(nsim=50)
hist( as.numeric(result$Bootbias) )
hist( as.numeric(result$Bootbias) )
hist(as.numeric(result$Bootbias))
hist(as.numeric(result$BootBias))
result<-simu2(nsim=50)
hist( as.numeric(result$BootBias) )
hist( as.numeric(result$JackBias) )
result<-simu2(nsim=50)
hist( as.numeric(result$BootBias) )
hist( as.numeric(result$JackBias) )
Jackknife<-function(v1,statfunc=sd, alpha=0.05)
{
n1<-length(v1)
jackvec<-NULL
mu0<-statfunc(v1)
for(i in 1:n1){
mua<-statfunc(v1[-i])
jackvec<-c(jackvec, n1*(mu0)-(n1-1)*mua) # psudovalue
}
jackbias<-(n1-1)*(mean(jackvec)-mu0)
jacksd<-sqrt(sum( (jackvec - mean(jackvec) )^2)  / (n1*(n1-1)) )
list(mu0=mu0,jackbias=jackbias,jacksd=jacksd, interval=c(mu0-qt(1-alpha, df=n1-1)*jacksd,
mu0+qt(1-alpha, df=n1-1)*jacksd))
}
my.bootstrapci<-function(vec0,nboot=10000,alpha=0.05,statfun=mean)
{
#extract sample size, mean and standard deviation from the original data
n0<-length(vec0)
mean0<-statfun(vec0)
#sd0<-sqrt(var(vec0))
# create a vector to store the location of the bootstrap studentized deviation vector
bootvec<-NULL
#create the bootstrap distribution using a for loop
for( i in 1:nboot){
vecb<-sample(vec0,replace=T)
#create mean and standard deviation to studentize
meanb<-statfun(vecb)
# sdb<-sqrt(var(vecb))
#note since resampling full vector we can use n0 for sample size of vecb
bootvec<-c(bootvec, meanb)
}
bias<- mean(bootvec)-mean0
#Calculate lower and upper quantile of the bootstrap distribution
lq<-quantile(bootvec,alpha/2)
uq<-quantile(bootvec,1-alpha/2)
#ADD the other two confidence intervals.
#incorporate into the bootstrap confidence interval (what algebra supports this?) and output result
#LB<-mean0-(sd0/sqrt(n0))*uq
#UB<-mean0-(sd0/sqrt(n0))*lq
#since I have the mean and standard deviation calculate the normal confidence interval here as well
se=sqrt(sum((bootvec - mean(bootvec))^2) / nboot)
NLB<-mean0-sd(vec0)*qnorm(1-alpha/2)
NUB<-mean0+sd(vec0)*qnorm(1-alpha/2)
list(bias=mean(bootvec)-mean0
,normal.confidence.interval=c(NLB,NUB), Pivotal.Interval=c(2*mean0-uq, 2*mean0-lq),
Percentile.Interval=c(quantile(bootvec, alpha/2), quantile(bootvec, 1-alpha/2)))
}
simu<-function(mu.val=3,n=30,nsim=1000)
{
#create coverage indicator vectors for bootstrap and normal
cvec.boot<-NULL
cvec.norm<-NULL
cvec.perc<-NULL
cvec.jack<-NULL
#calculate real mean
mulnorm<-(exp(mu.val+1/2))
#run simulation
for(i in 1:nsim){
if((i/10)==floor(i/10)){
print(i)
#let me know computer hasnt died
}
#sample the simulation vector
vec.sample<-rlnorm(n,mu.val)
#bootstrap it
boot.list<-my.bootstrapci(vec.sample)
boot.conf<-boot.list$Pivotal.Interval #aka pivot interval
norm.conf<-boot.list$normal.confidence.interval
percentile.conf<-boot.list$Percentile.Interval
jack<-Jackknife(vec.sample, statfun=mean)
jack.interval<-jack$interval
#calculate if confidence intervals include mu
#count up the coverage by the bootstrap interval
cvec.boot<-c(cvec.boot,(boot.conf[1]<mulnorm)*(boot.conf[2]>mulnorm))
#count up the coverage by the normal theory interval
cvec.norm<-c(cvec.norm,(norm.conf[1]<mulnorm)*(norm.conf[2]>mulnorm))
cvec.perc<-c(cvec.perc, (percentile.conf[1]< mulnorm)*(percentile.conf[2]>mulnorm) )
cvec.jack<-c(cvec.jack, (jack.interval[1]< mulnorm)*(jack.interval[2]>mulnorm))
}
#calculate and output coverage probability estimates
return(list(boot.coverage=(sum(cvec.boot)/nsim),norm.coverage=(sum(cvec.norm)/nsim), perc.coverage
=(sum(cvec.perc)/nsim), jack.coverage=(
sum(cvec.jack)/nsim) ) )
}
cat("n=10")
simu(n=10)
Jackknife<-function(v1,statfunc=sd, alpha=0.05)
{
n1<-length(v1)
jackvec<-NULL
mu0<-statfunc(v1)
for(i in 1:n1){
mua<-statfunc(v1[-i])
jackvec<-c(jackvec, n1*(mu0)-(n1-1)*mua) # psudovalue
}
jackbias<-(n1-1)*(mean(jackvec)-mu0)
jacksd<-sqrt(sum( (jackvec - mean(jackvec) )^2)  / (n1*(n1-1)) )
list(mu0=mu0,jackbias=jackbias,jacksd=jacksd, interval=c(mu0-qt(1-alpha, df=n1-1)*jacksd,
mu0+qt(1-alpha, df=n1-1)*jacksd))
}
my.bootstrapci<-function(vec0,nboot=10000,alpha=0.05,statfun=mean)
{
#extract sample size, mean and standard deviation from the original data
n0<-length(vec0)
mean0<-statfun(vec0)
#sd0<-sqrt(var(vec0))
# create a vector to store the location of the bootstrap studentized deviation vector
bootvec<-NULL
#create the bootstrap distribution using a for loop
for( i in 1:nboot){
vecb<-sample(vec0,replace=T)
#create mean and standard deviation to studentize
meanb<-statfun(vecb)
# sdb<-sqrt(var(vecb))
#note since resampling full vector we can use n0 for sample size of vecb
bootvec<-c(bootvec, meanb)
}
bias<- mean(bootvec)-mean0
#Calculate lower and upper quantile of the bootstrap distribution
lq<-quantile(bootvec,alpha/2)
uq<-quantile(bootvec,1-alpha/2)
#ADD the other two confidence intervals.
#incorporate into the bootstrap confidence interval (what algebra supports this?) and output result
#LB<-mean0-(sd0/sqrt(n0))*uq
#UB<-mean0-(sd0/sqrt(n0))*lq
#since I have the mean and standard deviation calculate the normal confidence interval here as well
se=sqrt(sum((bootvec - mean(bootvec))^2) / nboot)
NLB<-mean0-sd(vec0)*qnorm(1-alpha/2)
NUB<-mean0+sd(vec0)*qnorm(1-alpha/2)
list(bias=mean(bootvec)-mean0
,normal.confidence.interval=c(NLB,NUB), Pivotal.Interval=c(2*mean0-uq, 2*mean0-lq),
Percentile.Interval=c(quantile(bootvec, alpha/2), quantile(bootvec, 1-alpha/2)))
}
simu<-function(mu.val=3,n=30,nsim=1000)
{
#create coverage indicator vectors for bootstrap and normal
cvec.boot<-NULL
cvec.norm<-NULL
cvec.perc<-NULL
cvec.jack<-NULL
#calculate real mean
mulnorm<-(exp(mu.val+1/2))
#run simulation
for(i in 1:nsim){
if((i/100)==floor(i/100)){
print(i)
#let me know computer hasnt died
}
#sample the simulation vector
vec.sample<-rlnorm(n,mu.val)
#bootstrap it
boot.list<-my.bootstrapci(vec.sample)
boot.conf<-boot.list$Pivotal.Interval #aka pivot interval
norm.conf<-boot.list$normal.confidence.interval
percentile.conf<-boot.list$Percentile.Interval
jack<-Jackknife(vec.sample, statfun=mean)
jack.interval<-jack$interval
#calculate if confidence intervals include mu
#count up the coverage by the bootstrap interval
cvec.boot<-c(cvec.boot,(boot.conf[1]<mulnorm)*(boot.conf[2]>mulnorm))
#count up the coverage by the normal theory interval
cvec.norm<-c(cvec.norm,(norm.conf[1]<mulnorm)*(norm.conf[2]>mulnorm))
cvec.perc<-c(cvec.perc, (percentile.conf[1]< mulnorm)*(percentile.conf[2]>mulnorm) )
cvec.jack<-c(cvec.jack, (jack.interval[1]< mulnorm)*(jack.interval[2]>mulnorm))
}
#calculate and output coverage probability estimates
return(list(boot.coverage=(sum(cvec.boot)/nsim),norm.coverage=(sum(cvec.norm)/nsim), perc.coverage
=(sum(cvec.perc)/nsim), jack.coverage=(
sum(cvec.jack)/nsim) ) )
}
cat("n=10")
simu(n=10)
Jackknife<-function(v1,statfunc=sd, alpha=0.05)
{
n1<-length(v1)
jackvec<-NULL
mu0<-statfunc(v1)
for(i in 1:n1){
mua<-statfunc(v1[-i])
jackvec<-c(jackvec, n1*(mu0)-(n1-1)*mua) # psudovalue
}
jackbias<-(n1-1)*(mean(jackvec)-mu0)
jacksd<-sqrt(sum( (jackvec - mean(jackvec) )^2)  / (n1*(n1-1)) )
list(mu0=mu0,jackbias=jackbias,jacksd=jacksd, interval=c(mu0-qt(1-alpha, df=n1-1)*jacksd,
mu0+qt(1-alpha, df=n1-1)*jacksd))
}
my.bootstrapci<-function(vec0,nboot=10000,alpha=0.05,statfun=mean)
{
#extract sample size, mean and standard deviation from the original data
n0<-length(vec0)
mean0<-statfun(vec0)
#sd0<-sqrt(var(vec0))
# create a vector to store the location of the bootstrap studentized deviation vector
bootvec<-NULL
#create the bootstrap distribution using a for loop
for( i in 1:nboot){
vecb<-sample(vec0,replace=T)
#create mean and standard deviation to studentize
meanb<-statfun(vecb)
# sdb<-sqrt(var(vecb))
#note since resampling full vector we can use n0 for sample size of vecb
bootvec<-c(bootvec, meanb)
}
bias<- mean(bootvec)-mean0
#Calculate lower and upper quantile of the bootstrap distribution
lq<-quantile(bootvec,alpha/2)
uq<-quantile(bootvec,1-alpha/2)
#ADD the other two confidence intervals.
#incorporate into the bootstrap confidence interval (what algebra supports this?) and output result
#LB<-mean0-(sd0/sqrt(n0))*uq
#UB<-mean0-(sd0/sqrt(n0))*lq
#since I have the mean and standard deviation calculate the normal confidence interval here as well
se=sqrt(sum((bootvec - mean(bootvec))^2) / nboot)
NLB<-mean0-sd(vec0)*qnorm(1-alpha/2)
NUB<-mean0+sd(vec0)*qnorm(1-alpha/2)
list(bias=mean(bootvec)-mean0
,normal.confidence.interval=c(NLB,NUB), Pivotal.Interval=c(2*mean0-uq, 2*mean0-lq),
Percentile.Interval=c(quantile(bootvec, alpha/2), quantile(bootvec, 1-alpha/2)))
}
simu<-function(mu.val=3,n=30,nsim=1000)
{
#create coverage indicator vectors for bootstrap and normal
cvec.boot<-NULL
cvec.norm<-NULL
cvec.perc<-NULL
cvec.jack<-NULL
#calculate real mean
mulnorm<-(exp(mu.val+1/2))
#run simulation
for(i in 1:nsim){
if((i/100)==floor(i/100)){
print(i)
#let me know computer hasnt died
}
#sample the simulation vector
vec.sample<-rlnorm(n,mu.val)
#bootstrap it
boot.list<-my.bootstrapci(vec.sample)
boot.conf<-boot.list$Pivotal.Interval #aka pivot interval
norm.conf<-boot.list$normal.confidence.interval
percentile.conf<-boot.list$Percentile.Interval
jack<-Jackknife(vec.sample, statfun=mean)
jack.interval<-jack$interval
#calculate if confidence intervals include mu
#count up the coverage by the bootstrap interval
cvec.boot<-c(cvec.boot,(boot.conf[1]<mulnorm)*(boot.conf[2]>mulnorm))
#count up the coverage by the normal theory interval
cvec.norm<-c(cvec.norm,(norm.conf[1]<mulnorm)*(norm.conf[2]>mulnorm))
cvec.perc<-c(cvec.perc, (percentile.conf[1]< mulnorm)*(percentile.conf[2]>mulnorm) )
cvec.jack<-c(cvec.jack, (jack.interval[1]< mulnorm)*(jack.interval[2]>mulnorm))
}
#calculate and output coverage probability estimates
return(list(boot.coverage=(sum(cvec.boot)/nsim),norm.coverage=(sum(cvec.norm)/nsim), perc.coverage
=(sum(cvec.perc)/nsim), jack.coverage=(
sum(cvec.jack)/nsim) ) )
}
cat("n=10\n")
simu(n=10)
cat("n=30\n")
simu(n=30)
cat("n=100\n")
simu(n=100)
#sample variance divided by n
sam_var<-function(x){
return( sum( (x-mean(x))^2) / length(x)
)
}
simu2<-function(mu=0, sd=1 , n=30, nsim=1000){
boot.bias<-NULL
jack.bias<-NULL
for(i in 1:nsim){
vec.sample=rnorm(n, mean = mu, sd)
boot.bias<-c(boot.bias, my.bootstrapci(vec0 = vec.sample, statfun = sam_var)$bias )
jack.bias<-c(jack.bias, Jackknife(vec.sample, statfunc = sam_var)$jackbias )
}
return( list(
BootBias=boot.bias, JackBias=jack.bias
) )
}
result<-simu2(nsim=50)
hist( as.numeric(result$BootBias) )
hist( as.numeric(result$JackBias) )
setwd("D:/TwoDrive/OneDrive - mail.ustc.edu.cn/STAT581/MLE")
?rnorm
MLE<-function(x, type, bino=5){
if(type=="PointMass") { ux <- unique(x) ; return(  ux[which.max(tabulate(match(x, ux)))]) }
if (type=="Bernoulli") return( sum(x)/length(x) )
if(type=="Binomial") return(mean(x)/bino )
if(type=="Geometric") return( length(x)/mean(x) )
if(type=="Poisson") return( mean(x) )
if(type=="Uniform") return( list(a=min(x), b=max(x) ) )
if(type=="Normal" ) return( list(mu=mean(x), sigma=sqrt(  sum( (x-mean(x) )^2)/ length(x)  )))
if(type=="Exponential") return( mean(x))
#if(type=="Gamma") return(list(beta=(a1^2+a2)/a1, alpha=a1^2/(a1^2+a2)))
#if(type=="Beta") return(list(alpha=a1*(-2*a1^2+a1-a2)/(a1^2+a2), beta=(a1-1)*(2*a1^2-a1+a2)/(a1^2+a2)))
#if(type=="t") return(2*(a1^2+a2)/(a1^2+a2-1))
#if(type=="chi") return(2* )
}
partial <- function(f, ...) {
l <- list(...)
function(...) {
do.call(f, c(l, list(...)))
}
}
Parametric.Bootstrap<-function(n0 , nboot=10000, alpha=0.05, statfun=mean, FUN)
{
vec<-FUN(n=n0)
mean0<-statfun(vec0)
#sd0<-sqrt(var(vec0))
# create a vector to store the location of the bootstrap studentized deviation vector
bootvec<-NULL
#create the bootstrap distribution using a for loop
for( i in 1:nboot){
vecb<-sample(vec0,replace=T)
#create mean and standard deviation to studentize
meanb<-statfun(vecb)
# sdb<-sqrt(var(vecb))
#note since resampling full vector we can use n0 for sample size of vecb
bootvec<-c(bootvec, meanb)
}
lq<-quantile(bootvec,alpha/2)
uq<-quantile(bootvec,1-alpha/2)
se=sqrt(sum((bootvec - mean(bootvec))^2) / nboot)
list(bias=mean(bootvec)-mean0
, Pivotal.Interval=c(2*mean0-uq, 2*mean0-lq) )
}
vec0<-rnorm(n=100, mean=14, sd=7)
estimate<- MLE( vec0, type = "Normal")
print(estimate)
PartialNormal<- partial(rnorm, mean=estimate$mu, sd=estimate$sigma)
PartialBoot<-Parametric.Bootstrap(n0=30, FUN = PartialNormal)
print(PartialBoot)
vec0<-rnorm(n=100, mean=14, sd=7)
estimate<- MLE( vec0, type = "Normal")
print(estimate)
PartialNormal<- partial(rnorm, mean=estimate$mu, sd=estimate$sigma)
PartialBoot<-Parametric.Bootstrap(n0=30, FUN = PartialNormal)
print(PartialBoot)
if(PartialBoot[1]< 14 & 14<PartialBoot[2]) print("Paramatirc Bootstrap CI has covered the real argument!")
vec0<-rnorm(n=100, mean=14, sd=7)
estimate<- MLE( vec0, type = "Normal")
print(estimate)
PartialNormal<- partial(rnorm, mean=estimate$mu, sd=estimate$sigma)
PartialBoot<-Parametric.Bootstrap(n0=30, FUN = PartialNormal)
print(PartialBoot)
if(PartialBoot$Pivotal.Interval[1]< 14 & 14<PartialBoot$Pivotal.Interval[2]) print("Paramatirc Bootstrap CI has covered the real argument!")
?rpois
?pnorm
?ppois
vec1<- rois(n=100, lambda=107)
vec1<- rpois(n=100, lambda=107)
estimate2<-MLE(vec1, type = "Poisson")
ks.test(vec1, "ppois", estimate2)
set.seed(554)
vec1<- rpois(n=100, lambda=107)
estimate2<-MLE(vec1, type = "Poisson")
ks.test(vec1, "ppois", estimate2)
